[{"/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/index.js":"1","/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/reportWebVitals.js":"2","/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/components/App.js":"3","/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/utils/axiosCalls.js":"4","/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/components/header/einkaufHeader.js":"5","/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/components/ueberschrift/bereichUeberschrift.js":"6","/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/components/liste/containerListe.js":"7","/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/components/liste/listItem/listElement.js":"8"},{"size":518,"mtime":1637768249275,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1625474561618,"results":"11","hashOfConfig":"10"},{"size":8748,"mtime":1637770042570,"results":"12","hashOfConfig":"10"},{"size":428,"mtime":1637763340831,"results":"13","hashOfConfig":"10"},{"size":1398,"mtime":1637770153855,"results":"14","hashOfConfig":"10"},{"size":286,"mtime":1637768176777,"results":"15","hashOfConfig":"10"},{"size":760,"mtime":1637768176772,"results":"16","hashOfConfig":"10"},{"size":5711,"mtime":1637768176758,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"4v0oqy",{"filePath":"21","messages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"34","messages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"36","messages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38","usedDeprecatedRules":"20"},"/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/index.js",[],["39","40"],"/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/reportWebVitals.js",[],["41","42"],"/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/components/App.js",["43"],"import React from \"react\";\nimport \"./App.scss\";\nimport {Button} from \"react-bootstrap\";\nimport {AxiosCalls} from \"../utils/axiosCalls\";\nimport {EinkaufHeader} from \"./header/einkaufHeader\";\nimport {BereichUeberschrift} from \"./ueberschrift/bereichUeberschrift\";\nimport {ContainerListe} from \"./liste/containerListe\";\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            punkt: [],\n            punktErledigt: [],\n            amount: '',\n            showM: false,\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        console.log(\"start\");\n        this.back();\n        this.backEr();\n    }\n\n    /**\n     * Holt sich die Unerledigten Items vom Backend und setzt sie in state\n     */\n    back() {\n        const promise = AxiosCalls('get', 'http://127.0.0.1:8081/einkaufsListeElementeNotDone', \"NotDone\");\n        promise.then(wert => {\n            console.log(\"back \", wert.data);\n            this.setState({punkt: wert.data})\n        })\n    }\n\n    /**\n     * Holt sich die Erledigten items vom Backend und setzt sie in state\n     */\n    backEr() {\n        const promise = AxiosCalls('get', 'http://127.0.0.1:8081/einkaufsListeElementeDone', \"Done\");\n        promise.then(wert => this.setState({punktErledigt: wert.data}))\n    }\n\n\n    /**\n     * Man die eingabe konform, überprüft ob eine anzhal gegeben ist, speichert im state und backend\n     * @param value\n     */\n    handleSubmit = (value) => {\n        if (value !== \"\") {\n            const trim = value.trim();\n            const split = trim.split(/(\\d+)/);\n            let anzahl;\n            if (split[split.length - 1] === \"\") {\n                anzahl = split[split.length - 2];\n                split.length = split.length - 2;\n            } else {\n                anzahl = 1;\n            }\n            let einkaufsPunkt = split.toString();\n            einkaufsPunkt = einkaufsPunkt.replace(/,/g, '');\n            console.log(\"p: \" + einkaufsPunkt);\n            let cPunkt = {\n                \"itId\": 100,\n                \"einkaufsPunkt\": einkaufsPunkt,\n                \"strich\": false,\n                \"amount\": anzahl,\n            }\n\n            const promise = AxiosCalls('post', 'http://127.0.0.1:8081/einkaufsListe', cPunkt);\n            promise.then(item => {\n                console.log(\"App: Post .then:\", item.data);\n                let punkt = [...this.state.punkt];\n                punkt.push(item.data);\n                this.setState({punkt: punkt});\n            });\n        }\n    }\n\n\n    /**\n     * Von child to parent component, Wird im Child  listElement aufgerufen und mit de übergeben werte wird im state in ein orbjekt geupadtet\n     * @param {number} id - id des obekts fürs backend\n     * @param {string} title - einkaufsPunkt (name des Artikels)\n     * @param  harken - sind die einkaufsPunkte erledigt oder nicht\n     * @param {number} anzahl - die anzahl wie of ein arteikel gekauft werden soll\n     * @param {string} notizen - Notizen / bemerkungen zum artikel\n     */\n    updatePunktInState(id, title, harken, anzahl, notizen) {\n        console.log(\"parameter: \" + id + \" \" + title + \" \" + anzahl + \" \" + notizen)\n        console.log(\"punkt \" + this.state.punkt[0]);\n        let punkt = [...this.state.punkt];\n        let i = punkt.map(a => a.itId).indexOf(id);\n        console.log(\"i: \" + i);\n        let cPunkt = {...punkt[id]};\n        cPunkt = {\n            \"itId\": id,\n            \"einkaufsPunkt\": title,\n            \"strich\": harken,\n            \"amount\": anzahl,\n            \"notizen\": notizen\n        }\n        punkt[i] = cPunkt;\n        this.setState({punkt});\n        console.log(\"punktTest: \" + id + \" \" + this.state.punkt[i].itId, this.state.punkt[i].einkaufsPunkt, this.state.punkt[i].notizen);\n    }\n\n    /**\n     * Updated den state wenn ein Item verschoben wird von unerledigt zu erledigt und andersherum\n     * @param id\n     * @param harken\n     */\n    updatePunktStrichDoneOrNot(id, harken) {\n        console.log(\"harken: \" + harken);// strichw wert muss noch geändert werden.\n        let punkt = [...this.state.punkt];\n        let indexItem = punkt.map(a => a.itId).indexOf(id);\n        let punktErledigt = [...this.state.punktErledigt];\n        let indexItemErledigt = punktErledigt.map(a => a.itId).indexOf(id);\n        let speicher;\n        if (harken) {\n            speicher = punktErledigt[indexItemErledigt];\n            speicher.strich = false;\n            punktErledigt.splice(indexItemErledigt, 1);\n            punkt.push(speicher)\n        } else {\n            speicher = punkt[indexItem];\n            speicher.strich = true;\n            punkt.splice(indexItem, 1);\n            punktErledigt.push(speicher);\n        }\n        this.setState({punkt: punkt, punktErledigt: punktErledigt});\n    }\n\n    /**\n     *  Löscht alle erledigten Artikel /einkaufsPunkte\n     */\n    deleateAllDoneItems() {\n        const ob = {\n            \"itId\": 3,\n            \"einkaufsPunkt\": \"platzhalterdatenloeschen\",\n            \"strich\": false\n        }\n      const response = AxiosCalls('delete', 'http://127.0.0.1:8081/einkaufssListeElementeDoneLoeschen', ob);\n       // this.setState({punktErledigt: []});\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <EinkaufHeader handleSubmit={(value) => this.handleSubmit(value)}/>\n                <BereichUeberschrift ueberschrift={\"Zu erledigende Einkäufe\"}/>\n                <ContainerListe itemList={this.state.punkt}\n                                updatePunkt={(id, title, harken, anzahl, notizen) => this.updatePunktInState(id, title, harken, anzahl, notizen)}\n                                updateDoneOrNot={(id, harken) => this.updatePunktStrichDoneOrNot(id, harken)}/>\n                <BereichUeberschrift ueberschrift={\"Erledigte Einkäufe\"}/>\n                <ContainerListe itemList={this.state.punktErledigt}\n                                updatePunkt={(id, title, harken, anzahl, notizen) => this.updatePunktInState(id, title, harken, anzahl, notizen)}\n                                updateDoneOrNot={(id, harken) => this.updatePunktStrichDoneOrNot(id, harken)}/>\n                <div className=\"d-flex flex-row justify-content-center  \">\n                    <Button className=\" btn-secondary btn-sm mt-4 mb-4\" onClick={this.deleateAllDoneItems}>Erledigte\n                        Einkäufe\n                        löschen</Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n\n\n/*\n<div className=\"header\">\n                    <h1 className=\"ueberschrift\">Digitale Einkaufsliste</h1>\n                    <form className=\"row g-3 justify-content-center\"\nonSubmit={this.handleSubmit}>\n    <div className=\"col-auto\">\n    <input className=\"form-control\" type=\"text\" id=\"inp\" placeholder=\"Einkaufspunkt\"\nvalue={this.state.value} onChange={this.handleChange}/>\n</div>\n<div className=\"col-auto\">\n<Button type=\"submit\" className=\"btn-secondary\">Hinzufügen</Button>\n</div>\n</form>\n</div>\n\n\n<div className=\"d-flex justify-content-center\">\n                    <p className=\"schrift\">\n                        Zu erledigende Einkäufe\n                    </p>\n                </div>\n\n\n\n                <div className=\"d-flex justify-content-center\">\n                    <p className=\"schrift mt-4\">\n                        Erledigte Einkäufe\n                    </p>\n                </div>\n\n\n\n                <Container className=\"container\">\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"d-flex flex-wrap  justify-content-center reihe\">\n                            {this.state.punkt.map((item) => <ListElement item={item} id={item.itId}\n                                                                      updatePunkt={(id, title, harken, anzahl, notizen) => this.updatePunktInState(id, title, harken, anzahl, notizen)}\n                                                                      updateDoneOrNot={(id, harken) =>this.updatePunktStrichDoneOrNot(id,harken)}   />)}\n                        </div>\n                    </div>\n                </Container>\n\n\n                <Container className=\"container\">\n                    <div className=\"d-flex justify-content-center\">\n                        <div\n                            className=\"d-flex flex-wrap  justify-content-center reihe\">{this.state.punktErledigt.map((item) =>\n                            <ListElement item={item} id={item.itId}\n                                         updateDoneOrNot={(id, harken) =>this.updatePunktStrichDoneOrNot(id,harken)}  />\n                        )}</div>\n                    </div>\n                </Container>\n */","/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/utils/axiosCalls.js",["44","45"],"import axios from 'axios';\nimport React, {useState} from \"react\";\n\n/**\n * Übernimmt die axios calls anhand der übergebenen parameter, und returnt das propmise / ergebnis\n * @param method\n * @param url\n * @param object\n * @returns {AxiosPromise}\n * @constructor\n */\nexport function AxiosCalls(method,url, object){\n   const call = axios({\n        method: method,\n        url: url,\n        data: object,\n    })\n    return call;\n}","/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/components/header/einkaufHeader.js",[],"/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/components/ueberschrift/bereichUeberschrift.js",[],"/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/components/liste/containerListe.js",[],"/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/components/liste/listItem/listElement.js",["46","47","48","49","50"],"import axios from 'axios';\nimport React, {useState} from \"react\";\nimport {Col, Row, Card, Button, Modal} from \"react-bootstrap\";\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome';\nimport {faPen} from '@fortawesome/free-solid-svg-icons';\nimport \"../../../Styles.scss\";\nimport \"../../App.scss\";\nimport {AxiosCalls} from \"../../../utils/axiosCalls\";\n\n/**\n * Generiert ein Listen element / Item / einkaufspunkt mit den übergebenen werten\n * @param props\n * @returns {JSX.Element}\n * @constructor\n */\nexport function ListElement(props) {\n    const [amount, setAmount] = useState(props.item.amount);\n    const [showM, setShowM] = useState(false);\n    const [titel, setTitel] = useState(props.item.einkaufsPunkt)\n    const [notes, setNotes] = useState(props.item.notizen === undefined ? 'notizen' : props.item.notizen);\n    const [displayButton, setDisplayButton] = useState(props.item.strich ? \"none\" : \"visible\");\n    const [displayColour, setDisplayColour] = useState(props.item.strich);\n\n    /**\n     * Speichert die Anzahl onchange in den State\n     * @param e\n     */\n    const handleNumber = (e) => {\n        setAmount(e.target.value);\n        console.log(\"nummber: \" + e + \"id: \" + props.item.itId);\n    }\n\n    /**\n     * Setzt im Backend durch AxiosCalls und im App state über props.updateDone ein Item auf erledigt\n     */\n    const einkaufErledigt = () => {\n        console.log(\"card or box klicked: \" + props.item.itId);\n        const ob = {\n            \"itId\": props.id,\n            \"einkaufsPunkt\": \"platzhalterdatenloeschen\",\n            \"strich\": false,\n            \"amount\": 1\n        }\n        AxiosCalls('put','http://127.0.0.1:8081/einkaufsListeDurchgestrichen',ob);\n        props.updateDoneOrNot(props.id, props.item.strich);\n\n    }\n\n    /**\n     * Schließt Modal und speichert die änderungen im Backend (AxiosCalls) und im Frontend State (props.updatePunkt)\n     */\n    const handleClose = () => {\n        console.log(\"notizen: \" + notes);\n       const ob = {\n           \"itId\": props.item.itId,\n           \"einkaufsPunkt\": titel,\n           \"strich\": false,\n           \"amount\": amount,\n           \"notizen\": notes\n       }\n       AxiosCalls('put','http://127.0.0.1:8081/einkaufsListeUpdateM', ob);\n\n        props.updatePunkt(props.item.itId, titel, false, amount, notes);\n        setShowM(false);\n    }\n\n    /**\n     * Schließt Modal nur, ohne zu speichernt, setzt Werte auf vorher zurück\n     */\n    const handleCloseWithoutSaving = () => {\n\n        setShowM(false);\n        setTitel(props.item.einkaufsPunkt);\n        setNotes(props.item.notizen);\n        setAmount(props.item.amount);\n    }\n\n\n    const handleShow = () => setShowM(true);\n    const handleText = (e) => setTitel(e.target.value);\n    const handleNotes = (e) => setNotes(e.target.value)\n\n    return (\n\n        <Card className={\"cardStyle \" + (displayColour ? 'cardColourGreen' : 'cardColourRed')}\n              style={{border: '3px', cursor: \"pointer\"}}\n              key={props.item.itId.toString()}>\n            <div className=\"buttonHull\">\n                <Button style={{display: displayButton}} onClick={handleShow}\n                        className=\"bearbeitungsButton\"><FontAwesomeIcon className=\"form-icon\" icon={faPen}/></Button>\n            </div>\n            <Modal show={showM} onHide={handleCloseWithoutSaving}>\n                <Modal.Header closeButton>\n                    <Modal.Title>\n                        Bearbeite Einkaufspunkt\n                    </Modal.Title>\n                </Modal.Header>\n                <Modal.Body>\n                    <div className=\"container\">\n                        <div className=\"mb-3 row\">\n                            <label className=\"col-3 col-form-label\">Einkauf: </label>\n                            <div className=\"col-9\">\n                                <input className=\"form-control \" type=\"text\" onChange={handleText} value={titel}/>\n                            </div>\n                        </div>\n                        <div className=\"mb-3 row\">\n                            <label className=\"col-3 col-form-label\">Notizen: </label>\n                            <div className=\"col-9\">\n                                <input className=\"form-control\" type=\"text\"\n                                       placeholder=\"Notizen\"\n                                       onChange={handleNotes}\n                                       value={notes}/>\n                            </div>\n                        </div>\n                        <div className=\"row\">\n                            <label className=\" col-3 col-form-label\">Anzahl: </label>\n                            <div className=\"col-9\">\n                                <input className=\"form-control\" type=\"number\" value={amount}\n                                       onChange={(e) => handleNumber(e)}/>\n                            </div>\n                        </div>\n                    </div>\n                </Modal.Body>\n                <Modal.Footer><Button variant=\"secondary\" size=\"sm\"\n                                      onClick={handleCloseWithoutSaving}>Abbrechen</Button>\n                    <Button variant=\"primary\" size=\"sm\" onClick={handleClose}>Änderung Speichern</Button>\n                </Modal.Footer>\n            </Modal>\n            <Card.Body onClick={(e) => einkaufErledigt()}>\n                <div className=\"logoHull\">\n                    <p className=\"logo\">{props.item.einkaufsPunkt[0]}</p>\n                </div>\n                <div className=\"punktHull\">\n                    <p className=\"punkt\">{props.item.einkaufsPunkt}</p> <p className=\"punktAmount\">{props.item.amount}</p>\n                </div>\n            </Card.Body>\n\n        </Card>\n\n    )\n}\n\n",{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","replacedBy":"54"},{"ruleId":"51","replacedBy":"55"},{"ruleId":"53","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":147,"column":13,"nodeType":"59","messageId":"60","endLine":147,"endColumn":21},{"ruleId":"57","severity":1,"message":"61","line":2,"column":8,"nodeType":"59","messageId":"60","endLine":2,"endColumn":13},{"ruleId":"57","severity":1,"message":"62","line":2,"column":16,"nodeType":"59","messageId":"60","endLine":2,"endColumn":24},{"ruleId":"57","severity":1,"message":"63","line":1,"column":8,"nodeType":"59","messageId":"60","endLine":1,"endColumn":13},{"ruleId":"57","severity":1,"message":"64","line":3,"column":9,"nodeType":"59","messageId":"60","endLine":3,"endColumn":12},{"ruleId":"57","severity":1,"message":"65","line":3,"column":14,"nodeType":"59","messageId":"60","endLine":3,"endColumn":17},{"ruleId":"57","severity":1,"message":"66","line":21,"column":27,"nodeType":"59","messageId":"60","endLine":21,"endColumn":43},{"ruleId":"57","severity":1,"message":"67","line":22,"column":27,"nodeType":"59","messageId":"60","endLine":22,"endColumn":43},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],["68"],["69"],"no-unused-vars","'response' is assigned a value but never used.","Identifier","unusedVar","'React' is defined but never used.","'useState' is defined but never used.","'axios' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'setDisplayButton' is assigned a value but never used.","'setDisplayColour' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]