{"ast":null,"code":"var _jsxFileName = \"/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/components/App.js\";\nimport React from \"react\";\nimport \"./App.scss\";\nimport { Button } from \"react-bootstrap\";\nimport { AxiosCalls } from \"../utils/axiosCalls\";\nimport { EinkaufHeader } from \"./header/einkaufHeader\";\nimport { BereichUeberschrift } from \"./ueberschrift/bereichUeberschrift\";\nimport { ContainerListe } from \"./liste/containerListe\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleSubmit = value => {\n      if (value !== \"\") {\n        const trim = value.trim();\n        const split = trim.split(/(\\d+)/);\n        let anzahl;\n\n        if (split[split.length - 1] === \"\") {\n          anzahl = split[split.length - 2];\n          split.length = split.length - 2;\n        } else {\n          anzahl = 1;\n        }\n\n        let einkaufsPunkt = split.toString();\n        einkaufsPunkt = einkaufsPunkt.replace(/,/g, '');\n        console.log(\"p: \" + einkaufsPunkt);\n        let cPunkt = {\n          \"itId\": 100,\n          \"einkaufsPunkt\": einkaufsPunkt,\n          \"strich\": false,\n          \"amount\": anzahl\n        };\n        const promise = AxiosCalls('post', 'http://127.0.0.1:8081/einkaufsListe', cPunkt);\n        promise.then(item => {\n          console.log(\"App: Post .then:\", item.data);\n          let punkt = [...this.state.punkt];\n          punkt.push(item.data);\n          this.setState({\n            punkt: punkt\n          });\n        });\n      }\n    };\n\n    this.state = {\n      value: '',\n      punkt: [],\n      punktErledigt: [],\n      amount: '',\n      showM: false\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    console.log(\"start\");\n    this.back();\n    this.backEr();\n  }\n\n  componentDidUpdate(prevProps, prevState, snapshot) {\n    console.log(\"Upadate: \", this.state.punktErledigt);\n  }\n  /**\n   * Holt sich die Unerledigten Items vom Backend und setzt sie in state\n   */\n\n\n  back() {\n    const promise = AxiosCalls('get', 'http://127.0.0.1:8081/einkaufsListeElementeNotDone', \"NotDone\");\n    promise.then(wert => {\n      console.log(\"back \", wert.data);\n      this.setState({\n        punkt: wert.data\n      });\n    });\n  }\n  /**\n   * Holt sich die Erledigten items vom Backend und setzt sie in state\n   */\n\n\n  backEr() {\n    const promise = AxiosCalls('get', 'http://127.0.0.1:8081/einkaufsListeElementeDone', \"Done\");\n    promise.then(wert => this.setState({\n      punktErledigt: wert.data\n    }));\n  }\n  /**\n   * Man die eingabe konform, überprüft ob eine anzhal gegeben ist, speichert im state und backend\n   * @param value\n   */\n\n\n  /**\n   * Von child to parent component, Wird im Child  listElement aufgerufen und mit de übergeben werte wird im state in ein orbjekt geupadtet\n   * @param {number} id - id des obekts fürs backend\n   * @param {string} title - einkaufsPunkt (name des Artikels)\n   * @param  harken - sind die einkaufsPunkte erledigt oder nicht\n   * @param {number} anzahl - die anzahl wie of ein arteikel gekauft werden soll\n   * @param {string} notizen - Notizen / bemerkungen zum artikel\n   */\n  updatePunktInState(id, title, harken, anzahl, notizen) {\n    console.log(\"parameter: \" + id + \" \" + title + \" \" + anzahl + \" \" + notizen);\n    console.log(\"punkt \" + this.state.punkt[0]);\n    let punkt = [...this.state.punkt];\n    let i = punkt.map(a => a.itId).indexOf(id);\n    console.log(\"i: \" + i);\n    let cPunkt = { ...punkt[id]\n    };\n    cPunkt = {\n      \"itId\": id,\n      \"einkaufsPunkt\": title,\n      \"strich\": harken,\n      \"amount\": anzahl,\n      \"notizen\": notizen\n    };\n    punkt[i] = cPunkt;\n    this.setState({\n      punkt\n    });\n    console.log(\"punktTest: \" + id + \" \" + this.state.punkt[i].itId, this.state.punkt[i].einkaufsPunkt, this.state.punkt[i].notizen);\n  }\n  /**\n   * Updated den state wenn ein Item verschoben wird von unerledigt zu erledigt und andersherum\n   * @param id\n   * @param harken\n   */\n\n\n  updatePunktStrichDoneOrNot(id, harken) {\n    console.log(\"harken: \" + harken); // strichw wert muss noch geändert werden.\n\n    let punkt = [...this.state.punkt];\n    let indexItem = punkt.map(a => a.itId).indexOf(id);\n    let punktErledigt = [...this.state.punktErledigt];\n    let indexItemErledigt = punktErledigt.map(a => a.itId).indexOf(id);\n    let speicher;\n\n    if (harken) {\n      speicher = punktErledigt[indexItemErledigt];\n      speicher.strich = false;\n      punktErledigt.splice(indexItemErledigt, 1);\n      punkt.push(speicher);\n    } else {\n      speicher = punkt[indexItem];\n      speicher.strich = true;\n      punkt.splice(indexItem, 1);\n      punktErledigt.push(speicher);\n    }\n\n    this.setState({\n      punkt: punkt,\n      punktErledigt: punktErledigt\n    });\n  }\n  /**\n   *  Löscht alle erledigten Artikel /einkaufsPunkte\n   */\n\n\n  deleteAllDoneItems() {\n    /* const ob = {\n         \"itId\": 3,\n         \"einkaufsPunkt\": \"platzhalterdatenloeschen\",\n         \"strich\": false\n     } */\n    const response = AxiosCalls('delete', 'http://127.0.0.1:8081/einkaufssListeElementeDoneLoeschen');\n    this.setState({\n      punktErledigt: []\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(EinkaufHeader, {\n        handleSubmit: value => this.handleSubmit(value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BereichUeberschrift, {\n        ueberschrift: \"Zu erledigende Einkäufe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 159,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ContainerListe, {\n        itemList: this.state.punkt,\n        updatePunkt: (id, title, harken, anzahl, notizen) => this.updatePunktInState(id, title, harken, anzahl, notizen),\n        updateDoneOrNot: (id, harken) => this.updatePunktStrichDoneOrNot(id, harken)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(BereichUeberschrift, {\n        ueberschrift: \"Erledigte Einkäufe\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 163,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(ContainerListe, {\n        itemList: this.state.punktErledigt,\n        updatePunkt: (id, title, harken, anzahl, notizen) => this.updatePunktInState(id, title, harken, anzahl, notizen),\n        updateDoneOrNot: (id, harken) => this.updatePunktStrichDoneOrNot(id, harken)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"d-flex flex-row justify-content-center  \",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          className: \" btn-secondary btn-sm mt-4 mb-4\",\n          onClick: this.deleteAllDoneItems,\n          children: \"Erledigte Eink\\xE4ufe l\\xF6schen\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 167,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default App;\n/*\n<div className=\"header\">\n                    <h1 className=\"ueberschrift\">Digitale Einkaufsliste</h1>\n                    <form className=\"row g-3 justify-content-center\"\nonSubmit={this.handleSubmit}>\n    <div className=\"col-auto\">\n    <input className=\"form-control\" type=\"text\" id=\"inp\" placeholder=\"Einkaufspunkt\"\nvalue={this.state.value} onChange={this.handleChange}/>\n</div>\n<div className=\"col-auto\">\n<Button type=\"submit\" className=\"btn-secondary\">Hinzufügen</Button>\n</div>\n</form>\n</div>\n\n\n<div className=\"d-flex justify-content-center\">\n                    <p className=\"schrift\">\n                        Zu erledigende Einkäufe\n                    </p>\n                </div>\n\n\n\n                <div className=\"d-flex justify-content-center\">\n                    <p className=\"schrift mt-4\">\n                        Erledigte Einkäufe\n                    </p>\n                </div>\n\n\n\n                <Container className=\"container\">\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"d-flex flex-wrap  justify-content-center reihe\">\n                            {this.state.punkt.map((item) => <ListElement item={item} id={item.itId}\n                                                                      updatePunkt={(id, title, harken, anzahl, notizen) => this.updatePunktInState(id, title, harken, anzahl, notizen)}\n                                                                      updateDoneOrNot={(id, harken) =>this.updatePunktStrichDoneOrNot(id,harken)}   />)}\n                        </div>\n                    </div>\n                </Container>\n\n\n                <Container className=\"container\">\n                    <div className=\"d-flex justify-content-center\">\n                        <div\n                            className=\"d-flex flex-wrap  justify-content-center reihe\">{this.state.punktErledigt.map((item) =>\n                            <ListElement item={item} id={item.itId}\n                                         updateDoneOrNot={(id, harken) =>this.updatePunktStrichDoneOrNot(id,harken)}  />\n                        )}</div>\n                    </div>\n                </Container>\n */","map":{"version":3,"sources":["/Users/georgwenderoth/EinkaufsListeProject/FrontendEinkaufListe/src/components/App.js"],"names":["React","Button","AxiosCalls","EinkaufHeader","BereichUeberschrift","ContainerListe","App","Component","constructor","props","handleSubmit","value","trim","split","anzahl","length","einkaufsPunkt","toString","replace","console","log","cPunkt","promise","then","item","data","punkt","state","push","setState","punktErledigt","amount","showM","bind","componentDidMount","back","backEr","componentDidUpdate","prevProps","prevState","snapshot","wert","updatePunktInState","id","title","harken","notizen","i","map","a","itId","indexOf","updatePunktStrichDoneOrNot","indexItem","indexItemErledigt","speicher","strich","splice","deleteAllDoneItems","response","render"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport \"./App.scss\";\nimport {Button} from \"react-bootstrap\";\nimport {AxiosCalls} from \"../utils/axiosCalls\";\nimport {EinkaufHeader} from \"./header/einkaufHeader\";\nimport {BereichUeberschrift} from \"./ueberschrift/bereichUeberschrift\";\nimport {ContainerListe} from \"./liste/containerListe\";\n\nclass App extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            value: '',\n            punkt: [],\n            punktErledigt: [],\n            amount: '',\n            showM: false,\n        };\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    componentDidMount() {\n        console.log(\"start\");\n        this.back();\n        this.backEr();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        console.log(\"Upadate: \", this.state.punktErledigt);\n    }\n\n    /**\n     * Holt sich die Unerledigten Items vom Backend und setzt sie in state\n     */\n    back() {\n        const promise = AxiosCalls('get', 'http://127.0.0.1:8081/einkaufsListeElementeNotDone', \"NotDone\");\n        promise.then(wert => {\n            console.log(\"back \", wert.data);\n            this.setState({punkt: wert.data})\n        })\n    }\n\n    /**\n     * Holt sich die Erledigten items vom Backend und setzt sie in state\n     */\n    backEr() {\n        const promise = AxiosCalls('get', 'http://127.0.0.1:8081/einkaufsListeElementeDone', \"Done\");\n        promise.then(wert => this.setState({punktErledigt: wert.data}))\n    }\n\n\n    /**\n     * Man die eingabe konform, überprüft ob eine anzhal gegeben ist, speichert im state und backend\n     * @param value\n     */\n    handleSubmit = (value) => {\n        if (value !== \"\") {\n            const trim = value.trim();\n            const split = trim.split(/(\\d+)/);\n            let anzahl;\n            if (split[split.length - 1] === \"\") {\n                anzahl = split[split.length - 2];\n                split.length = split.length - 2;\n            } else {\n                anzahl = 1;\n            }\n            let einkaufsPunkt = split.toString();\n            einkaufsPunkt = einkaufsPunkt.replace(/,/g, '');\n            console.log(\"p: \" + einkaufsPunkt);\n            let cPunkt = {\n                \"itId\": 100,\n                \"einkaufsPunkt\": einkaufsPunkt,\n                \"strich\": false,\n                \"amount\": anzahl,\n            }\n\n            const promise = AxiosCalls('post', 'http://127.0.0.1:8081/einkaufsListe', cPunkt);\n            promise.then(item => {\n                console.log(\"App: Post .then:\", item.data);\n                let punkt = [...this.state.punkt];\n                punkt.push(item.data);\n                this.setState({punkt: punkt});\n            });\n        }\n    }\n\n\n    /**\n     * Von child to parent component, Wird im Child  listElement aufgerufen und mit de übergeben werte wird im state in ein orbjekt geupadtet\n     * @param {number} id - id des obekts fürs backend\n     * @param {string} title - einkaufsPunkt (name des Artikels)\n     * @param  harken - sind die einkaufsPunkte erledigt oder nicht\n     * @param {number} anzahl - die anzahl wie of ein arteikel gekauft werden soll\n     * @param {string} notizen - Notizen / bemerkungen zum artikel\n     */\n    updatePunktInState(id, title, harken, anzahl, notizen) {\n        console.log(\"parameter: \" + id + \" \" + title + \" \" + anzahl + \" \" + notizen)\n        console.log(\"punkt \" + this.state.punkt[0]);\n        let punkt = [...this.state.punkt];\n        let i = punkt.map(a => a.itId).indexOf(id);\n        console.log(\"i: \" + i);\n        let cPunkt = {...punkt[id]};\n        cPunkt = {\n            \"itId\": id,\n            \"einkaufsPunkt\": title,\n            \"strich\": harken,\n            \"amount\": anzahl,\n            \"notizen\": notizen\n        }\n        punkt[i] = cPunkt;\n        this.setState({punkt});\n        console.log(\"punktTest: \" + id + \" \" + this.state.punkt[i].itId, this.state.punkt[i].einkaufsPunkt, this.state.punkt[i].notizen);\n    }\n\n    /**\n     * Updated den state wenn ein Item verschoben wird von unerledigt zu erledigt und andersherum\n     * @param id\n     * @param harken\n     */\n    updatePunktStrichDoneOrNot(id, harken) {\n        console.log(\"harken: \" + harken);// strichw wert muss noch geändert werden.\n        let punkt = [...this.state.punkt];\n        let indexItem = punkt.map(a => a.itId).indexOf(id);\n        let punktErledigt = [...this.state.punktErledigt];\n        let indexItemErledigt = punktErledigt.map(a => a.itId).indexOf(id);\n        let speicher;\n        if (harken) {\n            speicher = punktErledigt[indexItemErledigt];\n            speicher.strich = false;\n            punktErledigt.splice(indexItemErledigt, 1);\n            punkt.push(speicher)\n        } else {\n            speicher = punkt[indexItem];\n            speicher.strich = true;\n            punkt.splice(indexItem, 1);\n            punktErledigt.push(speicher);\n        }\n        this.setState({punkt: punkt, punktErledigt: punktErledigt});\n    }\n\n    /**\n     *  Löscht alle erledigten Artikel /einkaufsPunkte\n     */\n    deleteAllDoneItems() {\n       /* const ob = {\n            \"itId\": 3,\n            \"einkaufsPunkt\": \"platzhalterdatenloeschen\",\n            \"strich\": false\n        } */\n      const response = AxiosCalls('delete', 'http://127.0.0.1:8081/einkaufssListeElementeDoneLoeschen');\n        this.setState({punktErledigt: []});\n    }\n\n    render() {\n        return (\n            <div className=\"App\">\n                <EinkaufHeader handleSubmit={(value) => this.handleSubmit(value)}/>\n                <BereichUeberschrift ueberschrift={\"Zu erledigende Einkäufe\"}/>\n                <ContainerListe itemList={this.state.punkt}\n                                updatePunkt={(id, title, harken, anzahl, notizen) => this.updatePunktInState(id, title, harken, anzahl, notizen)}\n                                updateDoneOrNot={(id, harken) => this.updatePunktStrichDoneOrNot(id, harken)}/>\n                <BereichUeberschrift ueberschrift={\"Erledigte Einkäufe\"}/>\n                <ContainerListe itemList={this.state.punktErledigt}\n                                updatePunkt={(id, title, harken, anzahl, notizen) => this.updatePunktInState(id, title, harken, anzahl, notizen)}\n                                updateDoneOrNot={(id, harken) => this.updatePunktStrichDoneOrNot(id, harken)}/>\n                <div className=\"d-flex flex-row justify-content-center  \">\n                    <Button className=\" btn-secondary btn-sm mt-4 mb-4\" onClick={this.deleteAllDoneItems}>Erledigte\n                        Einkäufe\n                        löschen</Button>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default App;\n\n\n/*\n<div className=\"header\">\n                    <h1 className=\"ueberschrift\">Digitale Einkaufsliste</h1>\n                    <form className=\"row g-3 justify-content-center\"\nonSubmit={this.handleSubmit}>\n    <div className=\"col-auto\">\n    <input className=\"form-control\" type=\"text\" id=\"inp\" placeholder=\"Einkaufspunkt\"\nvalue={this.state.value} onChange={this.handleChange}/>\n</div>\n<div className=\"col-auto\">\n<Button type=\"submit\" className=\"btn-secondary\">Hinzufügen</Button>\n</div>\n</form>\n</div>\n\n\n<div className=\"d-flex justify-content-center\">\n                    <p className=\"schrift\">\n                        Zu erledigende Einkäufe\n                    </p>\n                </div>\n\n\n\n                <div className=\"d-flex justify-content-center\">\n                    <p className=\"schrift mt-4\">\n                        Erledigte Einkäufe\n                    </p>\n                </div>\n\n\n\n                <Container className=\"container\">\n                    <div className=\"d-flex justify-content-center\">\n                        <div className=\"d-flex flex-wrap  justify-content-center reihe\">\n                            {this.state.punkt.map((item) => <ListElement item={item} id={item.itId}\n                                                                      updatePunkt={(id, title, harken, anzahl, notizen) => this.updatePunktInState(id, title, harken, anzahl, notizen)}\n                                                                      updateDoneOrNot={(id, harken) =>this.updatePunktStrichDoneOrNot(id,harken)}   />)}\n                        </div>\n                    </div>\n                </Container>\n\n\n                <Container className=\"container\">\n                    <div className=\"d-flex justify-content-center\">\n                        <div\n                            className=\"d-flex flex-wrap  justify-content-center reihe\">{this.state.punktErledigt.map((item) =>\n                            <ListElement item={item} id={item.itId}\n                                         updateDoneOrNot={(id, harken) =>this.updatePunktStrichDoneOrNot(id,harken)}  />\n                        )}</div>\n                    </div>\n                </Container>\n */"]},"metadata":{},"sourceType":"module"}